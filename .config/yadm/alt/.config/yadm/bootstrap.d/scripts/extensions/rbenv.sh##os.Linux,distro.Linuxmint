##############################################################################
#                                                                            #
# ░█▀▄░█▀▄░█▀▀░█▀█░█░█░░░░█▀▀░█░█                                            #
# ░█▀▄░█▀▄░█▀▀░█░█░▀▄▀░░░░▀▀█░█▀█                                            #
# ░▀░▀░▀▀░░▀▀▀░▀░▀░░▀░░▀░░▀▀▀░▀░▀                                            #
#                                                                            #
##############################################################################


# ---
# TOC
# ---
#
# ## Script Extension
# ## Extension Functionality
#

if [[ -z "$__RBENV_EXTENSION__" ]]; then
readonly __RBENV_EXTENSION__="__RBENV_EXTENSION__"

## Script Extension
readonly RBENV_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
readonly RBENV_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly RBENV_NAME="rbenv"
readonly RBENV_VERSION="0.1.0"

rbenv_print_version() {
  echo "$rbenv_VERSION"
}

rbenv_print_usage() {
  cat << USAGE
Usage: $RBENV_SCRIPT [-V VERSION] [-v] [-h]
  -V  VERSION of dotfiles to verify this extension will work with
  -v  Print the version of this extension
  -h  Print usage and help
USAGE
}

rbenv_verify_version() {
  local version="$1"
  local major_version="$(echo "$version" | grep -o "^[1-9][0-9]*" )"
  local minor_version="$(echo "$version" | sed -r "s/^$major_version.//" | \
    grep -o "^[1-9][0-9]*" )"
  if [[ major_version -lt 1 && minor_version -lt 2 ]]; then
    exit 0
  else
    exit 1
  fi
}

rbenv_parse_args() {
  while getopts :V:vh opt; do
    case "$opt" in
      V)
        rbenv_verify_version "$OPTARG"
        ;;
      v)
        rbenv_print_version
        ;;
      h)
        rbenv_print_usage
        ;;
      [?])
        rbenv_print_usage
        exit 1
        ;;
    esac
  done
}

rbenv_main() {
  rbenv_parse_args "$@"
}

if [[ "$(basename "$0")" == "$RBENV_SCRIPT" ]]; then
  rbenv_main "$@"
  exit 0
fi


## Extension Functionality
RBENV_DIR="$HOME/.rbenv"
BREW_BIN_DIR="$HOME/.linuxbrew/bin"

rbenv_loader() {
  dot_ext_subscribe "$DOT_WILL_SETUP_SOFTWARE_EVENT" rbenv_init "$RBENV_NAME"
}


## Installation
rbenv_init_rbenv() {
  if [[ -d "$RBENV_DIR" ]]; then
    return 0
  fi

  dot_ext_dryrun pushd $HOME && $BREW_BIN_DIR/rbenv init && popd
  if [[ "$(dot_ext_is_dryrun)" != $DOT_EXT_TRUE ]]; then
    if pushd $HOME && $BREW_BIN_DIR/rbenv init && popd; then
      dot_ext_puts "rbenv initialized at $RBENV_DIR"
    else
      dot_ext_warn "rbenv initialization failed."
      return 1
    fi
  fi
  dot_ext_puts_info "Done initializing rbenv."

  return 0
 }

rbenv_init() {
  dot_ext_puts "Performing rbenv initialization..."
  if [[ -d "$RBENV_DIR" ]]; then
    dot_ext_puts_info "Already installed."
    return
  fi
  rbenv_init_rbenv
  dot_ext_puts_info "Done performing rbenv initialization."

  dot_ext_unsubscribe "$DOT_WILL_SETUP_SOFTWARE_EVENT"
}

fi
